---C---
Q:  Rate yourself in C and CPP. (7/6)
Q:  How process executes by system OR how main gets executes by system ?
Ans:
1.Preprocessing is the first pass of any C compilation. It processes include-files, conditional compilation instructions and macros.
2.Compilation is the second pass. It takes the output of the preprocessor, and the source code, and generates assembler source code.
3.Assembly is the third stage of compilation. It takes the assembly source code and produces an assembly listing with offsets. The assembler output is stored in an object file.
4.Linking is the final stage of compilation. It takes one or more object files or libraries as input and combines them to produce a single (usually executable) file. In doing so, it resolves references to external symbols, assigns final addresses to procedures/functions and variables, and revises code and data to reflect new addresses (a process called relocation).

You can see the detailed compilation process by enabling -v (verbose) option. For example,
gcc -v test.c           ----- for all verbose output of gcc 

gcc -E test.c > test.i  ----- for preprocessing stage
gcc -S test.c           ----- for compiler stage
gcc -o test.o test.s    ----- for assembly stage, the gcc will excute 'as' and 'ld'  at this stage. so we no need to link external libs, 
                              objs seperatly. But you can run only assembler command as below
as -o test.o test.s
ld -o test.bin test.o   ----- for linker stage 

What is compile output ?
- The compiler output is .s assembly code from .i 

test.o is an ELF 
-------------------
ELF ? It's one of several object and executable file formats used on Unix systems. For our discussion, the interesting thing about ELF is its header format. Every ELF executable has ELF header

objdump -f test.o 

start address 0x080482d0
objdump --disassemble test.o
080482d0 <_start>:

objdump --disasseble test.o
_start
_finit
_init
_main
_init >> _libc_start_main()

objdump -R test.o

Now the ball is on libc's hand. __libc_start_main is a function in libc.so.6. If you look for __libc_start_main in glibc source code, the prototype looks like this.

extern int BP_SYM (__libc_start_main) (int (*main) (int, char **, char **),
		int argc,
		char *__unbounded *__unbounded ubp_av,
		void (*init) (void),
		void (*fini) (void),
		void (*rtld_fini) (void),
		void *__unbounded stack_end)
__attribute__ ((noreturn));

------
------
Here is what happens. 

#GCC build your program with crtbegin.o/crtend.o/gcrt1.o And the other default libraries are dynamically linked by default. Starting address of the executable is set to that of _start.
#Kernel loads the executable and setup text/data/bss/stack, especially, kernel allocate page(s) for arguments and environment variables and pushes all necessary information on stack.
#Control is pased to _start. _start gets all information from stack setup by kernel, sets up argument stack for __libc_start_main, and calls it. 
#__libc_start_main initializes necessary stuffs, especially C library(such as malloc) and thread environment and calls our main. 
#our main is called with main(argv, argv) Actually, here one interesting point is the signature of main. __libc_start_main thinks main's signature as main(int, char **, char **) If you are curious, try the following prgram.
main(int argc, char** argv, char** env)
{
    int i = 0;
    while(env[i] != 0)
    {
       printf("%s\n", env[i++]);
    }
    return(0);
}

******************************************************************************************************************
Q: Can we replaced main fuction OR Is there any way to execute program without main fuction ?

#include<stdio.h>
#include<stdlib.h>
 
void _start(){
 	printf("test");
 	 exit(0);
}

------
 cc prog_without_main.c -nostartfiles

******************************************************************************************************************
Q: How process loader knows the main() function symbol address ?
- From elf header 

$ objdump -f test.o 

test.o:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000400440


$ nm test.o 

00000000004005c0 T __libc_csu_fini
0000000000400550 T __libc_csu_init
                 U __libc_start_main@@GLIBC_2.2.5
000000000040052d T main
                 U printf@@GLIBC_2.2.5
00000000004004a0 t register_tm_clones
0000000000400440 T _start
0000000000601040 D __TMC_END__


e_entry >> _start >> __libc_start_main() >> main()
******************************************************************************************************************
Q: #define vs Const
- macro is just replaced with value in preprocessing stage
- macro Doesn't check data type
- With const, we can declare actual variable. 
- With const, making your code known to the debugger 
******************************************************************************************************************

Q: Count the no of 1s in decimal number and what is complexity of process. ( hint (O)n and (O)0)
Q: Did you used optimisation and what is (O)n optimisation. ?
Q: What are the optimisation techiques and list some of them 
Q: Take your first name and count each character occurence and arrange them in to A-Z order.
Q: Explain memory allocation in c and cpp.
Q: Did you faced malloc() failed ever ? if failed then give example.
Q: What is malloc max limit and how to modify.
Q: How to delete a single linked list node using single pointer?
Q: What are the oop's concept ?
Q: Explain any one oops concept and where you used ? How oops helps you to resolve your problem ?
Q: Loop optimization
Q: Macro vs inline 
Q: Camera pipeline 
Q: Inheritance 
Q: Thread sync.(condition variable, shared mem and other types)
Q: Thread deadlock and example and how to avoid it.
Q: Malloc free() call option. (Free allocated mem without free() call)
Q: ION memory 
Q: Binder IPC and it's alternate options in android
Q: Count bit set in unsinged char byte (hint lookup table)
Q: Consider 100 threads and a single function, threads calles function. So, how much stack frame created ? Is function stack frame is inside thread's stack frame ?
Q: Segmentation fault and page fault.
Q: Strace tool and valgrid tool
Q: Treble project in details with CTS and VTS
Q: Static and extern for function 
Q: Storage classess
Q: Little endian and Big indian 
Q: Output ? 
int main() {
int arr[2] = {1,2};
arr++;
}
  
Q: Complete boot process in details (PWR BUTTON PRESS, PBL,SBL,LK,KERNEL,DRIVERS PROBE,INIT,ZYGOATE, SYSTEM SERVER and APPLICATION)
Q: Android debugging procedure with example ( Native issue and app issue)
Q: Filesystem ( ext4, fat, jff2s, squasfs, etc)
Q: Qualcomm android partitions (all)
Q: mmap() system call
Q: const pointer and all const possiblities with pointer.
Q: Consider we have 100 thread which represent a seperate modules. These thread generates events. How you will listen and control those events in separate thread which will act as a central unit thread.
Q: Challanging issue debug and how it resolved  ?
Q: Setup skype call.
Q: Function pointer.
Q: Output ?

#define fun A##a##B##b
print("%s\n",fun);

Q: Preprocessor directive
